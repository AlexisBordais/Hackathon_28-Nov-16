(function() {
  'use strict';

  var globals = typeof window === 'undefined' ? global : window;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var aliases = {};
  var has = ({}).hasOwnProperty;

  var expRe = /^\.\.?(\/|$)/;
  var expand = function(root, name) {
    var results = [], part;
    var parts = (expRe.test(name) ? root + '/' + name : name).split('/');
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function expanded(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var hot = null;
    hot = hmr && hmr.createHot(name);
    var module = {id: name, exports: {}, hot: hot};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var expandAlias = function(name) {
    return aliases[name] ? expandAlias(aliases[name]) : name;
  };

  var _resolve = function(name, dep) {
    return expandAlias(expand(dirname(name), dep));
  };

  var require = function(name, loaderPath) {
    if (loaderPath == null) loaderPath = '/';
    var path = expandAlias(name);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    throw new Error("Cannot find module '" + name + "' from '" + loaderPath + "'");
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  var extRe = /\.[^.\/]+$/;
  var indexRe = /\/index(\.[^\/]+)?$/;
  var addExtensions = function(bundle) {
    if (extRe.test(bundle)) {
      var alias = bundle.replace(extRe, '');
      if (!has.call(aliases, alias) || aliases[alias].replace(extRe, '') === alias + '/index') {
        aliases[alias] = bundle;
      }
    }

    if (indexRe.test(bundle)) {
      var iAlias = bundle.replace(indexRe, '');
      if (!has.call(aliases, iAlias)) {
        aliases[iAlias] = bundle;
      }
    }
  };

  require.register = require.define = function(bundle, fn) {
    if (typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          require.register(key, bundle[key]);
        }
      }
    } else {
      modules[bundle] = fn;
      delete cache[bundle];
      addExtensions(bundle);
    }
  };

  require.list = function() {
    var list = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        list.push(item);
      }
    }
    return list;
  };

  var hmr = globals._hmr && new globals._hmr(_resolve, require, modules, cache);
  require._cache = cache;
  require.hmr = hmr && hmr.wrap;
  require.brunch = true;
  globals.require = require;
})();

(function() {
var global = window;
var process;
var __makeRelativeRequire = function(require, mappings, pref) {
  var none = {};
  var tryReq = function(name, pref) {
    var val;
    try {
      val = require(pref + '/node_modules/' + name);
      return val;
    } catch (e) {
      if (e.toString().indexOf('Cannot find module') === -1) {
        throw e;
      }

      if (pref.indexOf('node_modules') !== -1) {
        var s = pref.split('/');
        var i = s.lastIndexOf('node_modules');
        var newPref = s.slice(0, i).join('/');
        return tryReq(name, newPref);
      }
    }
    return none;
  };
  return function(name) {
    if (name in mappings) name = mappings[name];
    if (!name) return;
    if (name[0] !== '.' && pref) {
      var val = tryReq(name, pref);
      if (val !== none) return val;
    }
    return require(name);
  }
};
'use strict';

/*
This file is the entry point of Angular application.
There are all depedencies (module)
*/
(function (app) {})(require('angular').module('app', [require('angular-ui-router'), 'app.config', 'app.services', 'app.blog']));
;'use strict';

/*
Create Angular module app.blog and define all states
app.blog : nested state of state app (see routes.js) is an abstrat state too with templateUrl
app.blog.list : nested state of state app.blog, display blog-list component
app.blog.item : nested state of state app.blog, display blog-item component with editable attribute value is true
*/
(function (app) {
    'use strict';

    app.config(['$stateProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {
        $stateProvider.state('app.blog', {
            url: '',
            abstract: true,
            templateUrl: 'js/components/blog/blog.html'
        }).state('app.blog.list', {
            url: '/',
            template: '<blog-list></blog-list>'
        }).state('app.blog.item', {
            url: '/:id',
            template: '<blog-item editable="true"></blog-item>'
        });
    }]);
})(require('angular').module('app.blog', []));
;'use strict';

/*
Create app.config module
*/
(function (app) {})(require('angular').module('app.config', []));
;'use strict';

/*
Create app.service module
*/
(function (app) {})(require('angular').module('app.services', []));
;'use strict';

/*
Create Angular component blogItem into module app.blog with databinding properties
- post : post data for all content
- editable : boolean indicate if this element is editable
*/
(function (app) {
    'use strict';

    app.component('blogItem', {
        bindings: {
            post: "<",
            editable: "<"
        },
        templateUrl: 'js/components/blog/blogItem/blogItem.html',
        controller: ['PostsService', '$stateParams', '$state', function (PostsService, $stateParams, $state) {
            var _this = this;

            var initialPost = void 0;
            // Test if $stateParams.id exists (ex: stateParams.id is 1234567 form this url http://domain.ext/1234567)
            if ($stateParams.id) {
                // If $stateParams.id is _new (when you click on add on blogListMenu button see blogListMenu.html)
                if ($stateParams.id === '_new') {
                    // Affect post variable with empty object
                    this.post = {};
                    // Affect editMode property to true
                    this.editMode = true;
                } else {
                    // If $stateParams.id is an id we make HTTP request with this id to get data
                    PostsService.getById($stateParams.id).then(function (res) {
                        // when this request receives response we affect response data to this controller variable post
                        _this.post = res.data;
                        // save into initialPost a copy of this post (used for undo)
                        initialPost = angular.copy(_this.post);
                    });
                }
            } else {
                //If $stateParams.id doesn't exist we change state to app.blog.list (redirection to list)
                $state.go('app.blog.list');
            }

            // Create delete function.
            // If you want to use in view you can call with $ctrl.delete()
            this.delete = function () {
                // Call delete method form PostsService with post
                PostsService.delete(_this.post).then(function (res) {
                    // when this request receive response we change state to app.blog.list (redirection to list)
                    $state.go('app.blog.list');
                });
            };

            // Create save function.
            // If you want to use in view you can call with $ctrl.save()
            this.save = function () {
                // Call save method form PostsService with post
                PostsService.save(_this.post).then(function (res) {
                    // Change editMode value to false
                    _this.editMode = false;
                    if (!_this.post._id) {
                        // if it's new post (when post._id doesn't exist) we affect to post variable response data (post created)
                        _this.post = res.data;
                    }
                });
            };

            // Create undo function.
            // If you want to use in view you can call with $ctrl.undo()
            this.undo = function () {
                // Affect initialPost value to post and change editMode to false
                _this.post = initialPost;
                _this.editMode = false;
            };
        }]
    });
})(require('angular').module('app.blog'));
;'use strict';

/*
Create Angular component blogItemMenu into module app.blog with databindings properties
- editMode : boolean to indicate if blogItem is in editMode or not
- onUndo : function
- onEdit : function
- onDelete : function
- onSave : function
*/
(function (app) {
    'use strict';

    app.component('blogItemMenu', {
        bindings: {
            editMode: "=",
            onUndo: "&",
            onEdit: "&",
            onDelete: "&",
            onSave: "&"
        },
        templateUrl: 'js/components/blog/blogItem/blogItemMenu.html'
    });
})(require('angular').module('app.blog'));
;'use strict';

/*
Create Angular component blogList into module app.blog
*/
(function (app) {
    'use strict';

    app.component('blogList', {
        templateUrl: 'js/components/blog/blogList/blogList.html',
        controller: ['PostsService', function (PostsService) {
            var _this = this;

            // Define startIndex variable with default value 3
            this.startIndex = 3;

            // Call get() method from PostsService.
            // When this request receive response we affect response data to this controller variable posts
            PostsService.get().then(function (res) {
                _this.posts = res.data;
            });

            // Create loadMore function.
            // If you want to use in view, you can call with $ctrl.loadMore()
            this.loadMore = function () {
                // Add 3 to startIndex
                _this.startIndex += 3;
            };
        }]
    });
})(require('angular').module('app.blog'));
;'use strict';

/*
Create Angular component blogListMenu into module app.blog
*/
(function (app) {
    'use strict';

    app.component('blogListMenu', {
        templateUrl: 'js/components/blog/blogList/blogListMenu.html'
    });
})(require('angular').module('app.blog'));
;'use strict';

/*
Create Angular config in app.config module
*/
(function (app) {
    'use strict';

    app.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {
        // Define prefix
        $locationProvider.hashPrefix('!');
        // For each url not found redirection to '/'
        $urlRouterProvider.otherwise('/');
        /*
          Define a state with name 'app' this state is abstract and url is empty (root of application)
          template is ui-view it's used to display nested views
        */
        $stateProvider.state('app', {
            url: '',
            abstract: true,
            template: '<ui-view></ui-view>'
        });
    }]);
})(require('angular').module('app.config'));
;'use strict';

/*
Create Angular service PostsService in app.services module
*/
(function (app) {
    'use strict';

    app.service('PostsService', function ($http) {
        return {
            get: function get() {
                // HTTP Request method GET to our express API
                return $http.get('/api/posts');
            },
            getById: function getById(id) {
                // HTTP Request method GET with param (post id) to our express API
                return $http.get('/api/posts/' + id);
            },
            save: function save(post) {
                if (post._id) {
                    // HTTP Request method PUT (update) with param and data (post) to our express API
                    return $http.put('/api/posts/' + post._id, post);
                } else {
                    // HTTP Request method POST (create) with data (post) to our express API
                    return $http.post('/api/posts', post);
                }
            },
            delete: function _delete(post) {
                // HTTP Request method DELETE (delete) with param (post id) to our express API
                return $http.delete('/api/posts/' + post._id);
            }
        };
    });
})(require('angular').module('app.services'));
;require.alias("brunch/node_modules/deppack/node_modules/node-browser-modules/node_modules/process/browser.js", "process");process = require('process');require.register("___globals___", function(exports, require, module) {
  
});})();require('___globals___');


//# sourceMappingURL=app.min.js.map