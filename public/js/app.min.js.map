{"version":3,"sources":["public/js/app.js","public/js/components/blog/blog.md.js","public/js/components/home/home.md.js","public/js/config/config.md.js","public/js/services/services.md.js","public/js/components/blog/blogItem/blogItem.js","public/js/components/blog/blogItem/blogItemMenu.js","public/js/components/blog/blogList/blogList.js","public/js/components/blog/blogList/blogListMenu.js","public/js/components/home/home.js","public/js/config/routes.js","public/js/services/postsService.js"],"names":["app","require","module","config","$stateProvider","$urlRouterProvider","$locationProvider","state","url","abstract","templateUrl","template","component","bindings","post","editable","controller","PostsService","$stateParams","$state","initialPost","id","editMode","getById","then","res","data","angular","copy","go","delete","save","image","file","base64","_id","undo","console","log","yourModel","onUndo","onEdit","onDelete","onSave","startIndex","get","posts","loadMore","hashPrefix","otherwise","service","$http","put"],"mappings":"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","file":"public/js/app.min.js","sourcesContent":["/*\nThis file is the entry point of Angular application.\nThere are all depedencies (module)\n*/\n((app) => {\n  'use strict'\n})(require('angular').module('app', [\n  require('angular-ui-router'),\n  'app.config',\n  'naif.base64',\n  'app.services',\n  'app.home',\n  'app.blog'\n]))\n","/*\nCreate Angular module app.blog and define all states\napp.blog : nested state of state app (see routes.js) is an abstrat state too with templateUrl\napp.blog.list : nested state of state app.blog, display blog-list component\napp.blog.item : nested state of state app.blog, display blog-item component with editable attribute value is true\n*/\n((app) => {\n    'use strict'\n    app.config(['$stateProvider', ($stateProvider, $urlRouterProvider, $locationProvider) => {\n        $stateProvider\n        .state('app.blog', {\n            url: '/blog',\n            abstract: true,\n            templateUrl: 'js/components/blog/blog.html'\n        })\n        .state('app.blog.list', {\n            url: '/',\n            template: '<blog-list></blog-list>'\n        })\n        .state('app.blog.item', {\n            url: '/:id',\n            template: '<blog-item editable=\"true\"></blog-item>'\n        })\n    }])\n})(require('angular').module('app.blog', []))\n","((app) => {\n    'use strict'\n    app.config(['$stateProvider', ($stateProvider, $urlRouterProvider, $locationProvider) => {\n        $stateProvider\n        .state('app.home', {\n            url: '/',\n            template: '<home></home>'\n        })\n    }])\n})(require('angular').module('app.home', []))\n","/*\nCreate app.config module\n*/\n((app)=>{\n\n})(require('angular').module('app.config', []))\n","/*\nCreate app.service module\n*/\n((app)=>{\n\n})(require('angular').module('app.services', []))\n","/*\nCreate Angular component blogItem into module app.blog with databinding properties\n- post : post data for all content\n- editable : boolean indicate if this element is editable\n*/\n((app) => {\n    'use strict'\n    app.component('blogItem', {\n        bindings: {\n            post: \"<\",\n            editable: \"<\"\n        },\n        templateUrl: 'js/components/blog/blogItem/blogItem.html',\n        controller: ['PostsService', '$stateParams', '$state', function(PostsService, $stateParams, $state) {\n            let initialPost;\n            // Test if $stateParams.id exists (ex: stateParams.id is 1234567 form this url http://domain.ext/1234567)\n            if ($stateParams.id) {\n                // If $stateParams.id is _new (when you click on add on blogListMenu button see blogListMenu.html)\n                if ($stateParams.id === '_new') {\n                    // Affect post variable with empty object\n                    this.post = {};\n                    // Affect editMode property to true\n                    this.editMode = true\n                } else {\n                    // If $stateParams.id is an id we make HTTP request with this id to get data\n                    PostsService.getById($stateParams.id).then((res) => {\n                        // when this request receives response we affect response data to this controller variable post\n                        this.post = res.data;\n                        // save into initialPost a copy of this post (used for undo)\n                        initialPost = angular.copy(this.post)\n                    })\n                }\n            } else {\n                //If $stateParams.id doesn't exist we change state to app.blog.list (redirection to list)\n                $state.go('app.blog.list')\n            }\n\n            // Create delete function.\n            // If you want to use in view you can call with $ctrl.delete()\n            this.delete = () => {\n                // Call delete method form PostsService with post\n                PostsService.delete(this.post).then((res) => {\n                    // when this request receive response we change state to app.blog.list (redirection to list)\n                    $state.go('app.blog.list')\n                })\n            }\n\n            // Create save function.\n            // If you want to use in view you can call with $ctrl.save()\n            this.save = () => {\n              this.post.image = 'data:image/png;base64,' + this.file.base64;\n                // Call save method form PostsService with post\n                PostsService.save(this.post).then((res) => {\n                    // Change editMode value to false\n                    this.editMode = false\n                    if (!this.post._id) {\n                        // if it's new post (when post._id doesn't exist) we affect to post variable response data (post created)\n                        this.post = res.data\n                    }\n                })\n            }\n\n            // Create undo function.\n            // If you want to use in view you can call with $ctrl.undo()\n            this.undo = () => {\n                // Affect initialPost value to post and change editMode to false\n                this.post = initialPost\n                this.editMode = false\n            }\n\n            this.base64 = () => {\n              console.log(this.yourModel.base64)\n            }\n\n        }]\n    })\n})(require('angular').module('app.blog'))\n","/*\nCreate Angular component blogItemMenu into module app.blog with databindings properties\n- editMode : boolean to indicate if blogItem is in editMode or not\n- onUndo : function\n- onEdit : function\n- onDelete : function\n- onSave : function\n*/\n((app) => {\n    'use strict'\n    app.component('blogItemMenu', {\n        bindings: {\n            editMode: \"=\",\n            onUndo: \"&\",\n            onEdit: \"&\",\n            onDelete: \"&\",\n            onSave: \"&\"\n        },\n        templateUrl: 'js/components/blog/blogItem/blogItemMenu.html'\n    })\n})(require('angular').module('app.blog'))\n","/*\nCreate Angular component blogList into module app.blog\n*/\n((app) => {\n    'use strict'\n    app.component('blogList', {\n        templateUrl: 'js/components/blog/blogList/blogList.html',\n        controller: ['PostsService', function(PostsService) {\n            // Define startIndex variable with default value 3\n            this.startIndex = 3\n\n            // Call get() method from PostsService.\n            // When this request receive response we affect response data to this controller variable posts\n            PostsService.get().then((res) => {\n                this.posts = res.data\n            })\n\n            // Create loadMore function.\n            // If you want to use in view, you can call with $ctrl.loadMore()\n            this.loadMore = () => {\n                // Add 3 to startIndex\n                this.startIndex += 3\n            }\n\n        }]\n    })\n})(require('angular').module('app.blog'))\n","/*\nCreate Angular component blogListMenu into module app.blog\n*/\n((app) => {\n    'use strict'\n    app.component('blogListMenu', {\n        templateUrl: 'js/components/blog/blogList/blogListMenu.html'\n    })\n})(require('angular').module('app.blog'))\n","((app) => {\n  'use strict'\n  app.component('home', {\n    templateUrl: 'js/components/home/home.html',\n\n  })\n})(angular.module ('app.home'))\n","/*\nCreate Angular config in app.config module\n*/\n((app) => {\n    'use strict'\n    app.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', ($stateProvider, $urlRouterProvider, $locationProvider) => {\n        // Define prefix\n        $locationProvider.hashPrefix('!')\n        // For each url not found redirection to '/'\n        $urlRouterProvider.otherwise('/')\n        /*\n          Define a state with name 'app' this state is abstract and url is empty (root of application)\n          template is ui-view it's used to display nested views\n        */\n        $stateProvider.state('app', {\n            url: '',\n            abstract: true,\n            template: '<ui-view></ui-view>'\n        })\n    }])\n})(require('angular').module('app.config'))\n","/*\nCreate Angular service PostsService in app.services module\n*/\n((app) => {\n    'use strict'\n    app.service('PostsService', function($http) {\n        return {\n            get() {\n                // HTTP Request method GET to our express API\n                return $http.get('/api/posts')\n            },\n            getById(id) {\n                // HTTP Request method GET with param (post id) to our express API\n                return $http.get('/api/posts/' + id)\n            },\n            save(post) {\n                if (post._id) {\n                    // HTTP Request method PUT (update) with param and data (post) to our express API\n                    return $http.put('/api/posts/' + post._id, post)\n                } else {\n                    // HTTP Request method POST (create) with data (post) to our express API\n                    return $http.post('/api/posts', post)\n                }\n            },\n            delete(post) {\n                // HTTP Request method DELETE (delete) with param (post id) to our express API\n                return $http.delete('/api/posts/' + post._id)\n            }\n        }\n    })\n})(require('angular').module('app.services'))\n"]}